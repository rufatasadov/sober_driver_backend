// In-memory OTP storage (production-da Redis istifad…ô edilm…ôlidir)
const otpStorage = new Map();

const generateOTP = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

const sendOTP = async (phoneNumber, otp) => {
  try {
    // Development √º√ß√ºn console-a yazdƒ±r
    console.log(`üì± OTP g√∂nd…ôrildi: ${phoneNumber} - Kod: ${otp}`);
    console.log(`üí¨ Mesaj: Peregon hayda t…ôtbiqi √º√ß√ºn OTP kodunuz: ${otp}. Kod 5 d…ôqiq…ô …ôrzind…ô etibarlƒ±dƒ±r.`);
    
    // Production-da burada SMS g√∂nd…ôrm…ô servisi …ôlav…ô edil…ô bil…ôr
    // M…ôs…ôl…ôn: AWS SNS, MessageBird, v…ô ya ba≈üqa SMS provider

    return {
      success: true,
      messageId: `dev_${Date.now()}`
    };
  } catch (error) {
    console.error('OTP g√∂nd…ôrilm…ô x…ôtasƒ±:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

const storeOTP = (phoneNumber, otp) => {
  const expiryTime = Date.now() + 5 * 60 * 1000; // 5 d…ôqiq…ô
  otpStorage.set(phoneNumber, {
    otp,
    expiryTime
  });
  
  console.log(`üíæ OTP saxlanƒ±ldƒ±: ${phoneNumber} - Vaxt: ${new Date(expiryTime).toLocaleString()}`);
};

const verifyOTP = (phoneNumber, otp) => {
  const storedData = otpStorage.get(phoneNumber);
  
  if (!storedData) {
    console.log(`‚ùå OTP tapƒ±lmadƒ±: ${phoneNumber}`);
    return { valid: false, message: 'OTP tapƒ±lmadƒ±' };
  }

  if (Date.now() > storedData.expiryTime) {
    otpStorage.delete(phoneNumber);
    console.log(`‚è∞ OTP vaxtƒ± ke√ßib: ${phoneNumber}`);
    return { valid: false, message: 'OTP vaxtƒ± ke√ßib' };
  }

  if (storedData.otp !== otp) {
    console.log(`‚ùå Yanlƒ±≈ü OTP: ${phoneNumber} - G√∂nd…ôril…ôn: ${otp}, Saxlanƒ±lan: ${storedData.otp}`);
    return { valid: false, message: 'Yanlƒ±≈ü OTP' };
  }

  // OTP uƒüurla yoxlandƒ±qdan sonra sil
  otpStorage.delete(phoneNumber);
  console.log(`‚úÖ OTP uƒüurla yoxlandƒ±: ${phoneNumber}`);
  
  return { valid: true, message: 'OTP uƒüurla yoxlandƒ±' };
};

const clearExpiredOTPs = () => {
  const now = Date.now();
  let clearedCount = 0;
  
  for (const [phoneNumber, data] of otpStorage.entries()) {
    if (now > data.expiryTime) {
      otpStorage.delete(phoneNumber);
      clearedCount++;
    }
  }
  
  if (clearedCount > 0) {
    console.log(`üßπ ${clearedCount} …ôd…ôd vaxtƒ± ke√ßmi≈ü OTP t…ômizl…ôndi`);
  }
};

// H…ôr 5 d…ôqiq…ôd…ô bir vaxtƒ± ke√ßmi≈ü OTP-l…ôri t…ômizl…ô
setInterval(clearExpiredOTPs, 5 * 60 * 1000);

module.exports = {
  generateOTP,
  sendOTP,
  storeOTP,
  verifyOTP
}; 